import asyncio
from telebot.async_telebot import AsyncTeleBot
import requests
import json
from collections import defaultdict
import aiohttp

TELEGRAM_TOKEN = "7823426557:AAGpWbX8pNhR2_yPKGW8vKdksVKOLNXrmSw"
OPENROUTER_KEY = "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"
OPENROUTER_MODEL = "moonshotai/kimi-k2:free"
IMAGE_API_URL = "https://api.openrouter.ai/v1/images/generations"  # URL –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

bot = AsyncTeleBot(TELEGRAM_TOKEN)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_message_history = defaultdict(list)
MAX_HISTORY_LENGTH = 10

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

async def get_ai_response(user_id, message_text):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        history = user_message_history.get(user_id, [])
        history.append({"role": "user", "content": message_text})
        
        headers = {
            "Authorization": f"Bearer {OPENROUTER_KEY}",
            "Content-Type": "application/json",
        }
        
        response = requests.post(
            url="https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            data=json.dumps({
                "model": OPENROUTER_MODEL,
                "messages": history,
            })
        )
        response.raise_for_status()
        response_data = response.json()
        
        if 'choices' in response_data and response_data['choices']:
            assistant_message = response_data['choices'][0]['message']
            history.append(assistant_message)
            
            if len(history) > MAX_HISTORY_LENGTH:
                history = history[-MAX_HISTORY_LENGTH:]
            
            user_message_history[user_id] = history
            
            return assistant_message['content']
        
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"

async def generate_image(prompt):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –ø—Ä–æ–º–ø—Ç—É"""
    try:
        headers = {
            "Authorization": f"Bearer {OPENROUTER_KEY}",
            "Content-Type": "application/json",
        }
        
        payload = {
            "model": "stability-ai/sdxl",  # –ú–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            "prompt": prompt,
            "n": 1,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            "size": "1024x1024"  # –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(
                IMAGE_API_URL,
                headers=headers,
                json=payload
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    return data['data'][0]['url']  # URL —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                else:
                    error = await response.text()
                    print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {error}")
                    return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ generate_image: {e}")
        return None

@bot.message_handler(commands=['start', 'help'])
async def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ /start –∏ /help"""
    welcome_text = (
        "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø —É–º–Ω—ã–π –±–æ—Ç —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é –∏ –ø–∞–º—è—Ç—å—é.\n\n"
        "–Ø –º–æ–≥—É:\n"
        "- –í–µ—Å—Ç–∏ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥\n"
        "- –ó–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞\n"
        "- –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–≤–µ—á—É!\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/draw [–æ–ø–∏—Å–∞–Ω–∏–µ] - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
        "/clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "/model - —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"
    )
    await bot.reply_to(message, welcome_text)

@bot.message_handler(commands=['clear'])
async def clear_history(message):
    """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    user_message_history[user_id] = []
    await bot.reply_to(message, "üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—á–∏—â–µ–Ω–∞. –Ø –≤—Å—ë –∑–∞–±—ã–ª!")

@bot.message_handler(commands=['model'])
async def show_model(message):
    """–ü–æ–∫–∞–∑ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –º–æ–¥–µ–ª–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"""
    await bot.reply_to(message, f"üõ†Ô∏è –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {OPENROUTER_MODEL}")

@bot.message_handler(commands=['draw'])
async def draw_image(message):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /draw"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        prompt = message.text.split(' ', 1)[1] if len(message.text.split()) > 1 else None
        
        if not prompt:
            await bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /draw")
            return
        
        await bot.send_chat_action(message.chat.id, 'upload_photo')
        await bot.reply_to(message, f"üñåÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {prompt}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_url = await generate_image(prompt)
        
        if image_url:
            await bot.send_photo(message.chat.id, image_url)
        else:
            await bot.reply_to(message, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ draw_image: {e}")
        await bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

@bot.message_handler(content_types=['text'])
async def handle_text(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    await bot.send_chat_action(message.chat.id, 'typing')
    
    try:
        response_text = await get_ai_response(user_id, message.text)
        await bot.reply_to(message, response_text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    asyncio.run(bot.polling())